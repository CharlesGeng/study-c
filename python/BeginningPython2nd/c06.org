#+title:抽象

* 懒惰即美德
  1. 例子：
     #+begin_src python -n
       #Fibonacci数列函数
       def fibo(x):
           if x < 2:
               return;
           result = [0, 1]
           for i in range(x - 2):
               result.append(result[-1] + result[-2])
           return result;
       
       #测试
       myarray = fibo(10)
       print(myarray)
       input("Press enter!")       
       
       #结果
       >>> 
       [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
       Press enter!
       >>> 
       
     #+end_src

* 抽象和结构
  1. 说明：抽象可以节省很多工作，是计算机程序让人读懂的关键；

* 创建函数
  1. 说明：
     1. 函数是可以被调用的，它执行一些操作并返回一个值，可以使用内
	建函数 *callable* 判断函数是否可以被调用；
     2. 使用 *def* 语句定义函数；
     3. *return* 语句用来返回值；
  2. 例子：
     #+begin_src python -n
       #没有导入math模块，用callable判断函数是否可用
       >>> callable(math.sqrt)
       Traceback (most recent call last):
         File "<pyshell#9>", line 1, in <module>
           callable(math.sqrt)
       NameError: name 'math' is not defined
       #导入math模块
       >>> import math
       >>> callable(math.sqrt)
       True
       >>> 
       
       #创建函数
       >>> def myfunc(myparam):
               print("This is my func!")
               return 'Finish'
       
       #调用函数
       >>> myfunc('Test')
       This is my func!
       'Finish'
       >>> 
       
     #+end_src

** 给函数创建文档（Documenting Function）
   1. 说明：在函数开头添加一个字符串，它会随函数一同保存，这个字符串被
      称为文档字符串；
   2. 例子：
      #+begin_src python -n
        #定义函数，并在里面添加文档字符串（docstring）
        >>> def TestDocstring():
                '这是一个文档字符串，它会随函数一同保存'
                print('Hello, world!')
                return 0
        #调用函数
        >>> TestDocstring()
        Hello, world!
        0
        #使用内置的help函数可以显示函数中的文档字符串
        >>> help(TestDocstring)
        Help on function TestDocstring in module __main__:
        
        TestDocstring()
            这是一个文档字符串，它会随函数一同保存
        
        >>> 
        
      #+end_src

** 并非真正函数的函数
   1. 说明：有些函数只执行一些操作，不用向调用方返回值，这时函数定义时，
      可以省略return语句；
   2. 例子：
      #+begin_src python -n
        #不含return语句的函数
        >>> def myfunc():
                print("Hello")
        
                
        >>> myfunc()
        Hello
        
        #含return语句的函数
        >>> def myfunc1():
                print("Hello")
                return
        
        >>> myfunc1()
        Hello
        
        >>> result = myfunc()
        Hello
        #result结果为空对象
        >>> print(result)
        None
        >>> result = myfunc1()
        Hello
        #result结果为空对象
        >>> print(result)
        None
        >>> 
        
      #+end_src

* 参数魔法

** 值从哪里来
   1. 说明：
      1. 创建函数时应该保证在收到合法参数时，执行正确的操作，收到非
	 法参数时，执行明显的异常（一般通过断言（assert)或者异常
	 （exception）来实现）；
      2. 形式参数（formal parameters）：在函数定义中的参数；
      3. 实际参数（actual parameters）：在调用时的参数；
   2. 例子：
      #+begin_src python -n
        #name为形式参数
        >>> def hello(name):
                print("Hello, %s!" % name )
        
                
        #'Bill'为实际参数
        >>> hello('Bill')
        Hello, Bill!
        >>> 
        
      #+end_src

** 能够改变参数吗
   1. 说明：在函数内为参数赋与新值不会改变外面任何变量的值；
   2. 注意：如果参数是列表，那么如果函数中修改了参数，也将修改原列表,
      为了避免这种情况，可以使用分片来传递参数；
   3. 例子：
      #+begin_src python -n
        #函数不修改参数值
        >>> def myfunc(x):
                x=10
                return
        
        >>> x = 5
        >>> myfunc(x)
        >>> x
        5
        >>> 
        
        #如果参数是列表，那么在函数中如果修改了参数，也会影响到调用的列表
        >>> def editList(l):
                l[0] = 'Test'
                return
        
        >>> l = ['a', 'b', 'c']
        >>> l
        ['a', 'b', 'c']
        >>> editList(l)
        >>> l
        ['Test', 'b', 'c']
        >>> 
        
        #以分片的方式修改列表
        >>> l
        ['a', 'b', 'c']
        >>> def editList(l):
                l[0] = 'Test'
                print (l)
                return
        
        >>> editList(l[:])
        ['Test', 'b', 'c']
        >>> l
        ['a', 'b', 'c']
        >>> 
      #+end_src

** 关键字参数和默认值
   1. 说明：
      1. 关键字参数：在调用函数时，在实参中指定实参对应的形参，这种调用
         中的实参称为关键字参数；
      2. 位置参数：在调用函数时，通过位置匹配实参和形参，这种调用中的
         实参称为位置参数；
   2. 注意：
      1. 关键字参数可以在函数中给参数提供默认值；
      2. 位置参数和关键字参数可以联合使用，但是应该 *避免* 使用这种方
         式；
   3. 例子：
      #+begin_src python -n
        #关键字参数
        >>> def hello(greeting='Hello', name='world'):
                print("%s, %s" % (greeting, name))
                return
        
        #调用时不提供默认值，则调用后，直接使用函数定义中的默认值
        >>> hello()
        Hello, world
        
        #没有指明形参名，则打印时按位置参数方式调用
        >>> hello('Nice to meet you', 'Bill')
        Nice to meet you, Bill
        >>> hello('Bill', 'Hello')
        Bill, Hello
        
        #使用关键字参数，调用时用关键字匹配，与位置无关
        >>> hello(name='Bill', greeting='Nice to meet you')
        Nice to meet you, Bill
        >>> 
        
      #+end_src


** 收集参数
   1. 说明：
      1. 星号+参数名：参数前的星号将所有值放在同一个 *元组* 中，可以说
         是将这些值收集起来，然后使用；
      2. 两个星号：用于处理关键字参数，可以将关键字参数收集到同一个字
         典；
   2. 注意：调用时如果不提供任何元素，则收集参数就是一个空元组或空字典；
   3. 例子：
      #+begin_src python -n
        #星号+参数，将参数收集到元组中
        >>> def TestStar(x, *params):
                print(x)
                print(params)
                return
        
        >>> TestStar(1, 2,3,4,5)
        1
        (2, 3, 4, 5)
        
        #两个星号,将参数收集到字典中
        >>> def TestDoubleStar(x, **params):
                print(x)
                print(params)
                return
        
        >>> TestDoubleStar(x=1,y=2,z=3)
        1
        {'y': 2, 'z': 3}
        >>> 
        
      #+end_src

** 函数收集逆过程
   1. 说明：将实际参数放入元组或者列表，再调用函数的过程；
   2. 注意：使用一个星号来传递元组，使用两个星号来传递字典；
   3. 例子：
      #+begin_src python -n
        #传递元组
        >>> def myAdd(x, y):
                return x+y
        
        >>> data=(1231, 2131)
        >>> myAdd(*data)
        3362
        >>> 
        
        #传递字典
        >>> def myHello(greeting, name):
                print('%s, %s' % (greeting, name))
                return
        
        >>> data={'name':'Bill Gunn', 'greeting':'Hello'}
        >>> myHello(**data)
        Hello, Bill Gunn
        >>> 
        
      #+end_src

* 作用域
  1. 说明；在函数内声明的变量，都是局部变量，如果需要在函数内声明全局
     变量，需要在声明前添加关键字 *global*
  2. 例子：
     #+begin_src python -n
       #局部变量
       >>> def TestLocalParam():
               x = 10
               return
       
       >>> x
       Traceback (most recent call last):
         File "<pyshell#4>", line 1, in <module>
           x
       NameError: name 'x' is not defined
       
       #全局变量
       >>> y = 10
       >>> def TestGlobalParam():
               global y
               y = 100
               return
       >>> y
       10
       #使用函数修改全局变量
       >>> TestGlobalParam()
       >>> y
       100
       >>>        
       
     #+end_src
* 递归
** 阶乘
   1. 例子：
      #+begin_src python -n
        >>> def factorial(n):
                if n < 1:
                        return 0
                elif n == 1:
                        return 1
                else:
                        return factorial(n-1) * n
        
                
        >>> x = factorial(2)
        >>> x
        2
        >>> factorial(3)
        6
        >>> factorial(4)
        24
        >>> for i in range(10):
                print(factorial(i))
        
                
        0
        1
        2
        6
        24
        120
        720
        5040
        40320
        362880
        >>> 
        
      #+end_src

** 幂
   1. 例子：
      #+begin_src python -n
        >>> def mypow(x, y):
                'y must be positive integer'
                if y == 0:
                        return 1
                else:
                        return x * mypow(x, y-1)
        
        >>> mypow(0, 10)
        0
        >>> mypow(1, 10)
        1
        >>> mypow(2, 10)
        1024
        >>> mypow(2, 128) * 0.0002
        6.80564733841877e+34
        >>>       
        
      #+end_src

** 二元查找
   1. 例子：
      #+begin_src python -n
        >>> def binSearch(sequnce, number, lower, upper):
                if lower == upper:
                        assert number == sequnce[upper]
                        return upper
                middle = (lower + upper) // 2
                if number > sequnce[middle]:
                        return binSearch(sequnce, number, middle+1, upper)
                else:
                        return binSearch(sequnce, number, lower, middle)
        
                
        >>> x
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 
        79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
        >>> binSearch(x, 10, 0, 99)
        10
        >>> binSearch(x, 11, 0, 99)
        11
        >>> 
        
      #+end_src
